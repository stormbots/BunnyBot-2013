package org.usfirst.frc2811.BunnyBot2013.subsystems;

import org.usfirst.frc2811.BunnyBot2013.RobotMap;
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.command.Subsystem;

public class BallManager extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController intakeMotor = RobotMap.ballManagerIntakeMotor;
    DigitalInput intakeSensor = RobotMap.ballManagerIntakeSensor;
    Solenoid ballBlocker = RobotMap.ballManagerBallBlocker;
    SpeedController climberMotor = RobotMap.ballManagerClimberMotor;
    DigitalInput ballExitSensor = RobotMap.ballManagerBallExitSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private int ballcount;
    private boolean previousSwitchState;
    private boolean currentSwitchState;       
    
// Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        ballcount=0;
        //todo piston maybe engaged?
    }
    public int incrementInternalCountUp(){
        ballcount++;                
    return ballcount;
    //pointless
    }
    public int ballCountGet(){
        return ballcount;
    }
    public boolean getIntakeSensor(){
        return intakeSensor.get();
        //why?
        //useless
        
    }
    public void movePiston(boolean way){
        ballBlocker.set(way);
    }
        public void checkBallPickup(){    
            currentSwitchState = intakeSensor.get();
                if (previousSwitchState==false&&currentSwitchState==true){
                //disable ball capture
                movePiston(true); //true = retracted
                //stop motors
                //intakeMotor.set(0); //Turn off intake motors
                //wait an interminable amount of time
                //IMPORTANT--pickUpTime=cRio.time
                //turn off motors
            
            }
            previousSwitchState=currentSwitchState;
        }
        //if (ballcount>0){
            //int targetTime=?
            /*if (pickUpTime-cRioTime==targetTime){
                  
            }*/
        
    
}

