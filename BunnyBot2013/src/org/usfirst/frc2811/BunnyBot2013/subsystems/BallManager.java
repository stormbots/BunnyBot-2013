package org.usfirst.frc2811.BunnyBot2013.subsystems;

import org.usfirst.frc2811.BunnyBot2013.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2811.BunnyBot2013.commands.ManualBallAdvancer;


public class BallManager extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController intakeMotor1 = RobotMap.ballManagerIntakeMotor1;
    SpeedController intakeMotor2 = RobotMap.ballManagerIntakeMotor2;
    DigitalInput intakeSensor = RobotMap.ballManagerIntakeSensor;
    Solenoid ballBlocker = RobotMap.ballManagerBallBlocker;
    SpeedController climberMotor = RobotMap.ballManagerClimberMotor;
    DigitalInput ballExitSensor = RobotMap.ballManagerBallExitSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private int ballcount = 0;
    public boolean previousSwitchState;
    public boolean currentSwitchState;       
    private boolean UpDown = true;
    
// Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {

        setDefaultCommand(new ManualBallAdvancer());
    }

    public void grabberManual(boolean way){
        UpDown = way;
        updateMotors();
    }
    public void grabberShift(){
        UpDown = !UpDown;
        updateMotors();
    //pointless
    }
   
    }
    public void updateMotors(){
        ballBlocker.set(UpDown);
        if (UpDown) {
            intakeMotor1.set(0.0);
            intakeMotor2.set(0.0);
        } else {
            intakeMotor1.set(-1.0);
            intakeMotor2.set(1.0);
        }
    }
    
    public void moveBalls(double input){
        climberMotor.set(input);
    }
    
    
    
    
    public void checkBallPickup(){    
            currentSwitchState = intakeSensor.get();
                if (previousSwitchState==false&&currentSwitchState==true){
                //disable ball capture
                grabberManual(true); //true = retracted
                //stop motors
                //intakeMotor.set(0); //Turn off intake motors
                //wait an interminable amount of time
                //IMPORTANT--pickUpTime=cRio.time
                //turn off motors
            
            }
            previousSwitchState=currentSwitchState;
        }
        //if (ballcount>0){
            //int targetTime=?
            /*if (pickUpTime-cRioTime==targetTime){
                  
            }*/
    public int incrementInternalCountUp(){
        ballcount++;                
    return ballcount;
    }
    public int ballCountGet(){
        return ballcount;
    }
    public boolean getIntakeSensor(){
        return intakeSensor.get();
    }
    
}

