// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2811.BunnyBot2013;

import org.usfirst.frc2811.BunnyBot2013.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc2811.BunnyBot2013.subsystems.BallShooter;
import org.usfirst.frc2811.BunnyBot2013.subsystems.RabbitPusher;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    //declare joysticks here
    //public static Joystick [stick name];
    public static Joystick da;
    public static Joystick atk3;
    
    //declare JoystickButtons
    //public static Button [button name] = new JoystickButton([joystick], [button #]);
    //da
    public static Button b1;
    public static Button b2 = new JoystickButton(da, 2);
    public static Button b3 = new JoystickButton(da, 3);
    public static Button b4 = new JoystickButton(da, 4);
    public static Button b5 = new JoystickButton(da, 5);
    public static Button b6 = new JoystickButton(da, 6);
    public static Button b7 = new JoystickButton(da, 7);
    public static Button b8 = new JoystickButton(da, 8);
    public static Button b9 = new JoystickButton(da, 9);
    public static Button b10 = new JoystickButton(da, 10);
    
    //atk3
    //bt1 is the trigger
    public static Button bt1 = new JoystickButton(atk3, 1);
    public static Button bt2 = new JoystickButton(atk3, 2);
    public static Button bt3 = new JoystickButton(atk3, 3);
    public static Button bt4 = new JoystickButton(atk3, 4);
    public static Button bt5 = new JoystickButton(atk3, 5);
    public static Button bt6 = new JoystickButton(atk3, 6);
    public static Button bt7 = new JoystickButton(atk3, 7);
    public static Button bt8 = new JoystickButton(atk3, 8);
    public static Button bt9 = new JoystickButton(atk3, 9);
    public static Button bt10 = new JoystickButton(atk3, 10);
    public static Button bt11 = new JoystickButton(atk3, 11);
    
   
    
  //must have public static or it will not work!
   public static SpeedController motor1 = new Victor (1,1);
   public static SpeedController motor2 = new Jaguar (1,2);
   public static SpeedController motor3 = new Jaguar (1,3);
   public static SpeedController motor4 = new Jaguar (1,4);
   public static SpeedController motor5 = new Jaguar (1,5);
   public static SpeedController motor6 = new Jaguar (1,6);
   public static SpeedController motor7 = new Jaguar (1,7);
   public static SpeedController motor8 = new Jaguar (1,8);
   public static SpeedController motor9 = new Jaguar (1,9);

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton fireButton;
    public JoystickButton changeTarget;
    public Joystick joystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    da = new Joystick(1);
    atk3 = new Joystick(2);
    
    b1 = new JoystickButton(da, 1);
    b2 = new JoystickButton(da, 2);
    b3 = new JoystickButton(da, 3);
    b4 = new JoystickButton(da, 4);
    b5 = new JoystickButton(da, 5);
    b6 = new JoystickButton(da, 6);
    b7 = new JoystickButton(da, 7);
    b8 = new JoystickButton(da, 8);
    b9 = new JoystickButton(da, 9);
    b10 = new JoystickButton(da, 10);
    
    //atk3
    bt1 = new JoystickButton(atk3, 1);
    bt2 = new JoystickButton(atk3, 2);
    bt3 = new JoystickButton(atk3, 3);
    bt4 = new JoystickButton(atk3, 4);
    bt5 = new JoystickButton(atk3, 5);
    bt6 = new JoystickButton(atk3, 6);
    bt7 = new JoystickButton(atk3, 7);
    bt8 = new JoystickButton(atk3, 8);
    bt9 = new JoystickButton(atk3, 9);
    bt10 = new JoystickButton(atk3, 10);
    bt11 = new JoystickButton(atk3, 11);
    
    //what the buttons do
    //[button].[whenReleased or whenPressed](new [command group]());
    
    //DA BUTTON MAP
    //  7                   8
    //  5                   6
    //   ^    9        10   4
    //  < >  Mode          1 3
    //   v                  2
    //     Tog1        Tog2
    
    //ATK3 BUTTON MAP
    //         1                   
    //  6    4 3 5    11
    //  7      2      10  
    //       8   9       
    //1, 2, 3, 4, and 5 are on the center stick, 1 being the trigger
    
    b1.whenReleased(new FireBall());
    bt1.whenReleased(new FireBall());
    
    b4.whileHeld(new NewTarget());
    bt4.whileHeld(new NewTarget());
    
    b2.whenReleased(new PushRabbit());
    bt2.whenReleased(new PushRabbit());
    
    
    
    
    
    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //joystick = new Joystick(1);
        
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("SetBallSpeed", new SetBallSpeed());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

